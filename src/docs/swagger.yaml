openapi: 3.0.0
info:
  title: Note Vibecoding API
  description: API documentation for the Note Vibecoding application
  version: 1.0.0
servers:
  - url: http://localhost/api
    description: Local development server
paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 1|laravel_sanctum_token_hash
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/register:
    post:
      summary: User registration
      description: Registers a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password
                password_confirmation:
                  type: string
                  format: password
                  example: password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /posts:
    post:
      summary: Create a new post
      description: Creates a new blog post
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post created successfully
                  post:
                    $ref: '#/components/schemas/Post'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Only verified users can create posts
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: '2023-01-01T00:00:00.000000Z'
        created_at:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00.000000Z'
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        title:
          type: string
          nullable: true
          example: My First Blog Post
        content:
          type: string
          nullable: true
          example: This is the content of my first blog post.
        status:
          type: string
          enum: [draft, published, trash]
          example: draft
        allow_comments:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00.000000Z'
    PostRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
          maxLength: 50
          example: My First Blog Post
          description: Required when status is published, optional otherwise. Max 50 characters.
        content:
          type: string
          nullable: true
          maxLength: 2000
          example: This is the content of my first blog post.
          description: Optional. Max 2000 characters.
        status:
          type: string
          enum: [draft, published, trash]
          default: draft
          example: draft
          description: Post status. Default is draft.
        allow_comments:
          type: boolean
          default: true
          example: true
          description: Whether to allow comments on the post. Default is true.
    Error:
      type: object
      properties:
        message:
          type: string
          example: Unauthenticated.
    ValidationError:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            title:
              - The title field is required when status is published.
            content:
              - The content must not be greater than 2000 characters.
