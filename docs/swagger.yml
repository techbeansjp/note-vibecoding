openapi: 3.0.0
info:
  title: User Registration and Login API
  description: API for user registration (temporary and permanent) and login
  version: 1.0.0
servers:
  - url: http://localhost/api
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Temporary user registration
      description: Register a new user and send verification email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  example: "Test User"
                email:
                  type: string
                  format: email
                  example: "test@example.com"
                password:
                  type: string
                  format: password
                  example: "password"
                password_confirmation:
                  type: string
                  format: password
                  example: "password"
      responses:
        '201':
          description: User temporarily registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User temporarily registered successfully. Please check your email to complete registration."
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
  /auth/verify/{token}:
    get:
      summary: Permanent user registration
      description: Verify user email and complete registration
      tags:
        - Authentication
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Verification token sent in email
      responses:
        '200':
          description: User registration completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registration completed successfully."
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid verification token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid verification token"
  /auth/login:
    post:
      summary: User login
      description: Authenticate user and return token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "test@example.com"
                password:
                  type: string
                  format: password
                  example: "password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "1|laravel_sanctum_token_hash"
                  is_verified:
                    type: boolean
                    example: true
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
  /auth/logout:
    post:
      summary: User logout
      description: Invalidate user token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthenticated
  /user:
    get:
      summary: Get authenticated user
      description: Return the authenticated user's information
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthenticated
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Test User"
        email:
          type: string
          format: email
          example: "test@example.com"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-05-04T03:30:45.000000Z"
        created_at:
          type: string
          format: date-time
          example: "2025-05-04T03:25:45.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-05-04T03:30:45.000000Z"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
